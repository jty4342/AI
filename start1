//Kotlin 
//stt
import android.speech.*
// 이 패키지가 STT의 모든 기능!

val recognizer = SpeechRecognizer.createSpeechRecognizer(context)
// 음성 인식기를 생성!

recognizer.setRecognitionListener(object: RecognitionListener{
    override fun onReadyForSpeech(params: Bundle?) {}
    // 음성 인식 준비 완료
    override fun onRmsChanged(rmsdB: Float) {}
    // 음성의 RMS가 바뀌었을 때
    override fun onBufferReceived(buffer: ByteArray?) {}
    // 음성 데이터의 buffer를 받을 수 있다.
    override fun onPartialResults(partialResults: Bundle?) {}
    override fun onEvent(eventType: Int, params: Bundle?) {}
    override fun onBeginningOfSpeech() {}
    // 사용자가 말하기 시작할 때
    override fun onEndOfSpeech() {}
    // 사용자의 말이 끝났을 때
    override fun onError(error: Int) {}
    // 오류가 발생했을 때
    override fun onResults(results: Bundle) {}
    // 결과 값을 받음!
})

// onResults에서 텍스트를 받는 방법
val key = SpeechRecognizer.RESULTS_RECOGNITION
val result = results.getStringArrayList(key)
//result는 arraylist 안에 들어간 데이터는
//0번째가 부드럽게 변형 된 데이터
//이 후의 데이터는 띄어쓰기나 맞춤법이 어색한 데이터
val dataStr = result[0]

// 위의 방법을 통해 intent를 생성
val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply{
putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, context.packageName)
// packageName을 입력, 하단에서는 한국어 인식 정의
putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ko-KR") }
recognizer.startListening(intent) // 인식 시작
recognizer.stopListening // 인식 중단

//tts
//tts 생성
val tts = TextToSpeech(context, { state ->
    if (state != TextToSpeech.ERROR){
        tts.setLanguage(Locale.KOREA)
        // 언어 설정
    }
})
tts.setSpeechRate(0.9f)
// 말하는 속도 설정

tts.speak("말할 텍스트를 입력!", TextToSpeech.QUEUE_FLUSH, null, null)
// 말해!

tts.stop()
// tts speaking 중지
tts.shutdown()
// tts 중지
